/*
 * 项目名称：goAnnotations
 * 文件名：model.go
 * 日期：2024/11/06 22:14
 * 作者：Ben
 */

package model

import (
	"fmt"
	"go/format"
	"os"
	"path"
	"strings"
	"sync"

	"github.com/bwb0101/goAnnotations/generator"
	"github.com/bwb0101/goAnnotations/model"
)

type GeneratorModel struct {
	targetFilename string
}

func NewGeneratorModel() generator.Generator {
	return &GeneratorModel{}
}

func (eg *GeneratorModel) Generate(inputDir string, parsedSources model.ParsedSources) (err error) {
	var pkgOnce sync.Once
	var sb strings.Builder
	var col_tb_sb strings.Builder
	var col_st_sb strings.Builder
	var columns_sb strings.Builder
	var dao_type_sb strings.Builder
	var dao_sb strings.Builder
	var init_sb strings.Builder
	sb.WriteString("// Code generated by goAnnotations. DO NOT EDIT.\n")
	col_st_sb.WriteString("type colStruct struct {\n")
	columns_sb.WriteString("var Columns = colStruct{\n")
	dao_sb.WriteString("var DAO = struct {\n")
	init_sb.WriteString("func init() {\n")
	init_sb.WriteString("framework.Framework.Store.SetColumnTblStruct(map[storage.ColumnTblName]func() storage.StorageModel{\n")
	//
	for _, st := range parsedSources.Structs {
		if st.Fields[0].Name == "T" {
			pkgOnce.Do(func() {
				sb.WriteString("package model_user\n")
				sb.WriteString("import (\n")
				sb.WriteString("\"common/framework\"\n")
				sb.WriteString("\"common/framework/storage\"\n")
				sb.WriteString(")\n")
				sb.WriteString("type tb_key struct {\n")
				sb.WriteString("TKey string\n")
				sb.WriteString("MKey string\n")
				sb.WriteString("}\n")
			})
			col_tb_sb.WriteString(fmt.Sprintf("type col_%s struct {\n", st.Name))
			col_tb_sb.WriteString("tb_key\n")
			col_tb_sb.WriteString("TableName  storage.ColumnTblName // 表名\n")
			//
			columns_sb.WriteString(fmt.Sprintf("%s: col_%s{\n", st.Name, st.Name))
			columns_sb.WriteString(fmt.Sprintf("TableName: \"%s\",\n", st.Name))
			for i := 1; i < len(st.Fields); i++ {
				if field := st.Fields[i]; !strings.Contains(field.Tag, "-") {
					col_tb_sb.WriteString(fmt.Sprintf("%s storage.ColumnTblField\n", field.Name))
					if strings.Contains(field.Tag, "pk:") {
						columns_sb.WriteString(fmt.Sprintf("tb_key: tb_key{\"tb\", \"%s\"},\n", field.Name))
					} else {
						columns_sb.WriteString(fmt.Sprintf("%s: \"%s\",\n", field.Name, field.Name))
					}
				}
			}
			col_tb_sb.WriteString("}\n")
			col_st_sb.WriteString(fmt.Sprintf("%s col_%s\n", st.Name, st.Name))
			columns_sb.WriteString("},\n")
			dao_type_sb.WriteString(fmt.Sprintf("type %sDAO int8\n", strings.ToLower(st.Name[:1])+st.Name[1:]))
			dao_sb.WriteString(fmt.Sprintf("%s %sDAO\n", st.Name, strings.ToLower(st.Name[:1])+st.Name[1:]))
			init_sb.WriteString(fmt.Sprintf("Columns.%s.TableName: func() storage.StorageModel {\n", st.Name))
			init_sb.WriteString(fmt.Sprintf("return &%s{}\n", st.Name))
			init_sb.WriteString("},\n")
		}
	}
	col_st_sb.WriteString("}\n")
	columns_sb.WriteString("}\n")
	dao_sb.WriteString("}{}\n")
	init_sb.WriteString("})\n")
	init_sb.WriteString("}\n")
	//
	if bs, e := format.Source([]byte(sb.String() + col_tb_sb.String() + col_st_sb.String() + columns_sb.String() + dao_type_sb.String() + dao_sb.String() + init_sb.String())); e != nil {
		err = e
	} else {
		err = os.WriteFile(path.Join(inputDir, "columns.go"), bs, 0644)
	}
	return
}
